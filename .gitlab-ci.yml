# vars in gitlab-ci env:
#  RUNNER_IMAGE: dockerhub.cisco.com/as-dev-docker-local/cisco/cleur21_semops21:v2

stages:
  - validate
  - provision
  - deploy
  - test
  - notify

# we want to use different deployment parameters (i.e. different DNAC 
# server and/or project) and different notification rules depending on 
# if we run in master branch or in non-master branches
before_script:
  - if [ "$CI_BUILD_REF_NAME" == "master" ] ; then ARG_CONFIG="" ; else ARG_CONFIG="--config scripts/config-preprod.yaml"; fi
  - echo ARG_CONFIG=$ARG_CONFIG

validate:
  image: ${RUNNER_IMAGE}
  stage: validate
  script:
    - python scripts/validate.py

provision_templates:
  image: ${RUNNER_IMAGE}
  stage: provision
  artifacts:
    paths:
      - results.json
  script:
    - python scripts/provision_templates.py $ARG_CONFIG --template_dir dnac-templates/ --results results.json --debug

# when in master, also deploy
deploy_templates:
  image: ${RUNNER_IMAGE}
  stage: deploy
  only:
    - master
  artifacts:
    paths:
      - results_deploy.json
  script:
    - python scripts/deploy_templates.py $ARG_CONFIG --deploy_dir deployment/ --results results_deploy.json --debug

test:
  image: ${RUNNER_IMAGE}
  stage: test
  script:
    - echo 'test to be done'

# last step in the pipeline to report status
# we need multiple steps here as we want/need to differentiate between success
# and failures.. the $(CI_JOB_STATUS) unfortunatly is not available in the
# gitlab release used for this demo
notify_success:
  image: ${RUNNER_IMAGE}
  stage: notify
  when: on_success
  script:
    - python scripts/notify.py $ARG_CONFIG --results results.json --results results_deploy.json "✅ Pipeline on branch \"$CI_BUILD_REF_NAME\" completed successfully ($CI_PIPELINE_URL)"

notify_failure:
  image: ${RUNNER_IMAGE}
  stage: notify
  when: on_failure
  script:
    - python scripts/notify.py $ARG_CONFIG --results results.json --results results_deploy.json "❌ Pipeline on branch \"$CI_BUILD_REF_NAME\" failed ($CI_PIPELINE_URL)"
